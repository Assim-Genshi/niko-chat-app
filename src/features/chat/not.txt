// src/features/chat/useMessages.ts

// Inside the select statements in both fetchInitialMessages and loadMoreMessages...
.select(`*, sender:profiles(id, username, avatar_url, plan), ...`) // <-- Add plan

-----------------------------------------------------------------------------------------

import React, { useState, useEffect, useRef, useCallback } from 'react';

import { useMessages } from './useMessages';

import { Button, Input, Avatar, Skeleton, ScrollShadow, Tooltip, Image, Dropdown, DropdownTrigger, DropdownMenu, DropdownItem, DropdownSection} from '@heroui/react';

import {

  ArrowDownIcon, PaperAirplaneIcon, CheckIcon, ClockIcon,

  ExclamationCircleIcon, ArrowPathIcon, PhotoIcon, EllipsisVerticalIcon

} from '@heroicons/react/24/solid';

import { useAuth } from '../../contexts/AuthContext';

import { useSoundSettingsStore } from '../../lib/useSoundSettingsStore';

import { usePresence } from '../../contexts/PresenceContext';

import { useProfilePreview } from '../../contexts/ProfilePreviewContext';

import { Profile, ConversationPreview, Message } from '../../types';

import { supabase } from '../../supabase/supabaseClient';

import { PlanBadge } from '../../components/PlanBadge';

import { cn } from '../../lib/utils';


interface ChatWindowProps {

  conversation: ConversationPreview;

}


// Helper function to determine if a message should start a new group

const shouldStartNewGroup = (currentMsg: Message, previousMsg: Message | undefined): boolean => {

  if (!previousMsg) return true; // First message always starts a group

  if (currentMsg.sender_id !== previousMsg.sender_id) return true; // Different sender starts a group


  // Different minute starts a group

  const currentTimestamp = new Date(currentMsg.created_at);

  const previousTimestamp = new Date(previousMsg.created_at);

  if (currentTimestamp.getMinutes() !== previousTimestamp.getMinutes()) return true;


  return false;

};


type MessageBubbleProps = {

  msg: Message;

  isOwnMessage: boolean;

  startsNewGroup: boolean;

  onRetry: (content: string, tempId: string) => void;

};


const MessageBubble: React.FC<MessageBubbleProps> = ({ msg, isOwnMessage, startsNewGroup, onRetry }) => {

  const bubbleClasses = cn(

    "relative w-fit max-w-xs sm:max-w-sm md:max-w-md lg:max-w-lg px-3.5 py-2.5 shadow-sm",

    isOwnMessage

      ? "bg-brand-500 text-white"

      : "bg-base-200 text-base-content border border-base-300",

    startsNewGroup

      ? (isOwnMessage ? "rounded-t-2xl rounded-bl-2xl rounded-br-sm" : "rounded-t-2xl rounded-bl-sm rounded-br-2xl")

      : (isOwnMessage ? "rounded-l-2xl rounded-r-2xl" : "rounded-l-2xl rounded-r-2xl")

  );


  return (

    <div className={cn("flex items-end gap-2 group", isOwnMessage ? "flex-row-reverse" : "flex-row")}>

      <div className="w-8 h-full shrink-0 self-end">

        {startsNewGroup && <Avatar src={msg.sender?.avatar_url || '/avatar.png'} size="sm" />}

      </div>


      <div className={bubbleClasses}>

        {msg.content && (

          <p className="text-sm whitespace-pre-wrap break-words">{msg.content}</p>

        )}

        {msg.image_url && (

          <Image

            src={msg.image_url}

            alt="Chat image"

            className={cn("rounded-lg max-w-xs h-auto", { 'opacity-60': msg.status === 'sending' })}

          />

        )}

        <div className="flex items-center justify-end mt-1.5 gap-1.5 text-xs">

          {isOwnMessage && msg.status === 'error' && (

            <Tooltip content="Failed. Click to retry." color="danger">

              <button onClick={() => onRetry(msg.content!, msg.temp_id!)}>

                <ArrowPathIcon className="w-4 h-4 text-danger cursor-pointer" />

              </button>

            </Tooltip>

          )}

          <p className={isOwnMessage ? 'text-white/60' : 'text-base-content/60'}>

            {new Date(msg.created_at).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit', hour12: true })}

          </p>

          {isOwnMessage && msg.status === 'sending' && <ClockIcon className="w-3.5 h-3.5 text-white/80" />}

          {isOwnMessage && msg.status !== 'sending' && msg.read_at && <CheckIcon className="w-4 h-4 text-white/80" />}

        </div>

      </div>

      <Dropdown>

      <DropdownTrigger>

        <EllipsisVerticalIcon className="w-6 h-6 text-base-content/0 self-center cursor-pointer group-hover:text-base-content/60" />

      </DropdownTrigger>

      <DropdownMenu aria-label="Static Actions">

      <DropdownSection title={new Date(msg.created_at).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit', hour12: true })}>

         <DropdownItem key="new">Copy</DropdownItem>

         <DropdownItem key="copy">Reply</DropdownItem>

         <DropdownItem key="edit">Edit</DropdownItem>

         <DropdownItem

            key="delete"

            className="text-danger"

            color="danger"

            >

              Delete

              </DropdownItem>

      </DropdownSection>


      </DropdownMenu>


      </Dropdown>

    </div>

  );

};


export const ChatWindow: React.FC<ChatWindowProps> = ({ conversation }) => {

  const { session, user } = useAuth();

  const userId = session?.user?.id;

  const { messages, loading, loadingMore, hasMore, sendTextMessage, sendImageMessage, loadMoreMessages } = useMessages(conversation.conversation_id);


  const [newMessage, setNewMessage] = useState('');

  const messagesEndRef = useRef<HTMLDivElement>(null);

  const imageInputRef = useRef<HTMLInputElement>(null);

  const messagesContainerRef = useRef<HTMLDivElement>(null);

  const prevScrollHeightRef = useRef<number | null>(null);

  const initialScrollDoneRef = useRef(false);


  const { viewProfile } = useProfilePreview();

  const { onlineUsers } = usePresence();


  const scrollToBottom = useCallback((behavior: ScrollBehavior = 'smooth') => {

    messagesEndRef.current?.scrollIntoView({ behavior });

  }, []);


  useEffect(() => {

    if (!loading && messages.length > 0 && !initialScrollDoneRef.current) {

      scrollToBottom('auto');

      initialScrollDoneRef.current = true;

    }

  }, [loading, messages.length, scrollToBottom]);


  useEffect(() => {

    if (!initialScrollDoneRef.current) return;

    const container = messagesContainerRef.current;

    if (!container) return;


    if (prevScrollHeightRef.current !== null) {

      container.scrollTop = container.scrollHeight - prevScrollHeightRef.current;

      prevScrollHeightRef.current = null;

    } else {

      const isNearBottom = container.scrollHeight - container.scrollTop <= container.clientHeight + 250;

      if (isNearBottom) {

        scrollToBottom('smooth');

      }

    }

  }, [messages, scrollToBottom]);


  const handleScroll = useCallback(async () => {

    const container = messagesContainerRef.current;

    if (!container || loadingMore) return;


    if (container.scrollTop === 0 && hasMore && !loading) {

      prevScrollHeightRef.current = container.scrollHeight;

      await loadMoreMessages();

    }

  }, [hasMore, loading, loadingMore, loadMoreMessages]);


  const handleSend = (e: React.FormEvent) => {

    e.preventDefault();

    if (!newMessage.trim()) return;

    sendTextMessage(newMessage);

    setNewMessage('');

    setTimeout(() => scrollToBottom('smooth'), 50);

  };


  const handleImageUpload = (e: React.ChangeEvent<HTMLInputElement>) => {

    const file = e.target.files?.[0];

    if (file) sendImageMessage(file);

    e.target.value = "";

  };


  const handleHeaderClick = async () => {

    if (conversation.is_group || !conversation.other_participant_id) {

      if (conversation.is_group) {

        alert(`Group profile previews for '${conversation.group_name || 'Group'}' not implemented yet.`);

      }

      return;

    }


    const { data: fullProfile, error } = await supabase

      .from('profiles')

      .select('*')

      .eq('id', conversation.other_participant_id)

      .single();


    if (fullProfile) {

      viewProfile(fullProfile as Profile);

    } else {

      console.warn("Could not fetch full profile for preview, using partial info:", error);

      const partialProfile: Profile = {

        id: conversation.other_participant_id,

        username: conversation.display_name,

        full_name: conversation.display_name,

        avatar_url: conversation.display_avatar,

        banner_url: null,

        description: null,

        chatamata_id: null,

        joined_at: null,

        updated_at: null,

        profile_setup_complete: false,

        plan: "free",

      };

      viewProfile(partialProfile);

    }

  };


  return (

    <div className="w-full flex flex-col h-full relative">

      <div className="p-3 flex items-center space-x-3 sticky top-0 z-10 cursor-pointer bg-base-100d" onClick={handleHeaderClick}>

        <Avatar src={conversation.display_avatar || '/avatar.png'} size="md" />

        <div className="flex flex-col">

          <div className="flex items-center gap-2">

            <h2 className="text-base font-semibold text-base-content">{conversation.display_name}</h2>

            <PlanBadge plan={(conversation as any).other_participant_plan} />

          </div>

          {onlineUsers.has(conversation.other_participant_id || '') ? <p className='text-xs text-green-500'>Online</p> : <p className='text-xs text-gray-400'>Offline</p>}

        </div>

      </div>


      <ScrollShadow ref={messagesContainerRef} onScroll={handleScroll} className='h-full' size={60}>

        <div className="flex flex-col flex-grow p-4 overflow-y-auto bg-base-50 space-y-1">

          {loadingMore && <div className="flex justify-center py-2"><Skeleton className="h-5 w-20 rounded-lg" /></div>}


          {loading && (

            <div className="flex flex-col space-y-4">

              <div className="self-start w-3/4 space-y-1"><Skeleton className="h-12 w-full rounded-lg" /><Skeleton className="h-8 w-1/2 rounded-lg" /></div>

              <div className="self-end w-3/4 space-y-1"><Skeleton className="h-16 w-full rounded-lg" /><Skeleton className="h-10 w-3/4 self-end rounded-lg" /></div>

              <div className="self-start w-1/2 space-y-1"><Skeleton className="h-10 w-full rounded-lg" /></div>

            </div>

          )}


          {!loading && messages.map((msg, index) => {

            const previousMsg = messages[index - 1];

            const startsNewGroup = shouldStartNewGroup(msg, previousMsg);

            return (

              <MessageBubble

                key={msg.temp_id || msg.id}

                msg={msg}

                isOwnMessage={msg.sender_id === userId}

                startsNewGroup={startsNewGroup}

                onRetry={sendTextMessage}

              />

            );

          })}

          <div ref={messagesEndRef} />

        </div>

      </ScrollShadow>


      <div className="p-3 bg-base-100 sticky bottom-0">

        <form onSubmit={handleSend} className="flex items-center space-x-2">

          <input type="file" ref={imageInputRef} onChange={handleImageUpload} accept="image/*" className="hidden" />

          <Button isIconOnly variant="light" onPress={() => imageInputRef.current?.click()}>

            <PhotoIcon className="w-6 h-6 text-gray-500" />

          </Button>

          <Input

            placeholder="Type a message..."

            value={newMessage}

            onValueChange={setNewMessage}

            fullWidth

            radius='full'

            onKeyDown={(e) => { if (e.key === 'Enter' && !e.shiftKey) { handleSend(e); } }}

          />

          <Button type="submit" className='bg-brand-500 text-white' isIconOnly radius='full' isDisabled={!newMessage.trim()}>

            <PaperAirplaneIcon className='w-6 h-6' />

          </Button>

        </form>

      </div>

    </div>

  );

};